// LASER Power/Speed Raster Test Grid Macro For OpenBuilds Control
// V 1.1
// 
// Generates GCode to produce a raster pattern grid with varying speeds and powers
// Running this macro will replace any existing GCode in Control
// The GCode uses M4 to control the LASER and so needs LASER mode enabled ($32 = 1 in GRBL settings)
// 
// Use at own risk!
// DAG 19/4/23
//
// V 1.1 20/4/23 - corrected label power & feed calculation

// Change these values to customise basic operation:

var lines_mm = 8;		// Resolution of test patch (lines / mm)

var feed_Max = 3500;	// Maximum feed rate (mm/min)
var feed_Min = 500;		// Minimum feed rate (mm/min)
var feed_Columns = 7;	// Number of feedrate columns to draw

var power_Max = 1000;	// Maximum power (spindle speed units)
						// Check the value of $30 in GRBL settings if unsure what the maximum power is
var power_Min = 100;	// Minimum power (spindle speed units)
var power_Rows = 10;	// Number of power rows to draw

var patch_Width = 5;	// Width of each test patch (mm)
var patch_Height = 4;	// Height of each test patch (mm)
var patch_Border = 1; 	// Space between test patches (mm)


// Macro continues below...

var yStep = 1/lines_mm;									// Calculate raster line spacing
var patchLines = (patch_Height * lines_mm).toFixed();	// Calculate the number of lines needed for each patch
var rowCount;											// Row reference
var colCount;											// Column reference
var lineCount;											// Raster line within each patch
var labelPower = ((power_Max + power_Min)/2);			// Power level for labels
var labelFeed = ((feed_Max + feed_Min)/2);				// Feed rate for labels
var margin = ((''+power_Max).length*3)+1;				// Space at left for labels - text is ~3mm per character

// Start building the GCode string that will be the eventual output

var gcode = "; Laser Raster Test Pattern\n;\n";
gcode += "; " + power_Rows + " Power levels from " + power_Min + " to " + power_Max + " (spindle speed units)\n";
gcode += "; " + feed_Columns + " Feed rates from " + feed_Min + " to " + feed_Max + " mm/min\n";
gcode += "; Patch size " + patch_Width + "mm x " + patch_Height + "mm\n";
gcode += "; Generated by Openbuilds Control macro V1.1 by Misterg\n;\n";

gcode += `G21; mm-mode
G90; Absolute Positioning
G0 X0 Y0; Move to origin position
M04 S0; Laser on
`
// Add column labels

for (colCount =0; colCount <feed_Columns; colCount += 1) {
			
	var pSpeed = (feed_Min +(feed_Max - feed_Min)/(feed_Columns-1) * colCount).toFixed();
	var gcXval = margin + (patch_Border + patch_Width) * colCount +1;
	var gcYval = (patch_Border + patch_Height) * (power_Rows);
	var speedString = "" + pSpeed;
	var strlen = speedString.length;
	
	gcode += "S" + labelPower.toFixed() + " F" + labelFeed.toFixed() + "\n";
	
	for (var i=0; i<(strlen); i++){
		
		gcode += "G0 X" + gcXval +" Y"+(gcYval+ i*3.5)+"\n";
		gcode += "G91\n" + getGcode( speedString.substring(strlen-i-1, strlen-i)) +"G90\n";
		}
	}

// Generate the pattern

for (rowCount = 0; rowCount < power_Rows; rowCount += 1) {

//	var pPower = (power_Max - (power_Max - power_Min)/(power_Rows-1) *rowCount).toFixed(); 	// Power level for this row (descending)
	var pPower = ((power_Max - power_Min)/(power_Rows-1) *rowCount + power_Min).toFixed(); 	// Power level for this row (ascending)
	
	var pwrString = "" + pPower;															// Convert to string for label

	gcode += "S" + labelPower.toFixed() + " F" + labelFeed.toFixed() + "\n";
	
	// Generate row labels
	
	for (var i=0; i < (pwrString.length); i++){
		
		gcode += "G0 X" + (i*3) +" Y"+(patch_Border+ patch_Height)*rowCount+"\n";
		gcode += "G91\n" + getGcode( pwrString.substring(i, i+1)) +"G90\n";
		}
	// Generate raster pattern
	
	for (lineCount =0; lineCount < patchLines; lineCount += 1){
		
		var isOdd = (lineCount & 1);														//Flag to run passes in alternate directions
		for (colCount =0; colCount <feed_Columns; colCount += 1) {
			
			var wkgCol = colCount;
			if (isOdd == 1) {wkgCol = feed_Columns - colCount-1};
		
			var pSpeed = (feed_Min +(feed_Max - feed_Min)/(feed_Columns-1) *wkgCol).toFixed(); // Speed for this column
			
			var gcXval = margin + (patch_Border + patch_Width) * wkgCol;					
			var gcYval = (patch_Border + patch_Height) * rowCount + (yStep * lineCount);
			
			gcode += `G0 X` + (gcXval + patch_Width * isOdd) + ` Y` + gcYval +`\n`;
			gcode += `G1 X` + (gcXval + patch_Width * (isOdd ^ 1)) + ` F` + pSpeed + ` S` + pPower + `\n`;
		}
	}	
}
		
// Tidy up the end of the GCode and pass to OB COntrol

gcode += `M5 S0\n`;
gcode += `M2\n`;

editor.session.setValue(gcode);
parseGcodeInWebWorker(gcode)
printLog("<span class='fg-red'>[ Laser Test Pattern ] </span><span class='fg-green'>GCODE Loaded</span>")

// The End
 
function getGcode (numeral){		// Returns GCode string representing numbers 0 - 9
									// No error checking!
const gc_num = [];

gc_num[0] = `;zero
G0 X0.857 Y3
G1 X0.286
X0.428 Y-0.143
X0.286 Y-0.428
X0.143 Y-0.715
Y-0.428
X-0.143 Y-0.715
X-0.286 Y-0.428
X-0.428 Y-0.143
X-0.286
X-0.428 Y0.143
X-0.286 Y0.428
X-0.143 Y0.715
Y0.428
X0.143 Y0.715
X0.286 Y0.428
X0.428 Y0.143
`;

gc_num[1] = `;one
G0 Y2.429
G1 X0.286 Y0.142
X0.428 Y0.429
Y-3
`;

gc_num[2] = `;two
G0 X0.143 Y2.286
G1 Y0.143
X0.143 Y0.285
X0.143 Y0.143
X0.285 Y0.143
X0.572
X0.285 Y-0.143
X0.143 Y-0.143
X0.143 Y-0.285
Y-0.286
X-0.143 Y-0.286
X-0.285 Y-0.428
X-1.429 Y-1.429
X2
`;

gc_num[3] = `;three
G0 X0.286 Y3
G1 X1.571
X-0.857 Y-1.143
X0.429
X0.285 Y-0.143
X0.143 Y-0.143
X0.143 Y-0.428
Y-0.286
X-0.143 Y-0.428
X-0.286 Y-0.286
X-0.428 Y-0.143
X-0.429
X-0.428 Y0.143
X-0.143 Y0.143
X-0.143 Y0.285
`;

gc_num[4] = `;four
G0 X2.143 Y1
G1 X-2.143
X1.429 Y2
Y-3
`;

gc_num[5] = `;five
G0 X1.714 Y3
G1 X-1.428
X-0.143 Y-1.286
X0.143 Y0.143
X0.428 Y0.143
X0.429
X0.428 Y-0.143
X0.286 Y-0.286
X0.143 Y-0.428
Y-0.286
X-0.143 Y-0.428
X-0.286 Y-0.286
X-0.428 Y-0.143
X-0.429
X-0.428 Y0.143
X-0.143 Y0.143
X-0.143 Y0.285
`;

gc_num[6] = `;six
G0 Y1
G1 X0.143 Y0.429
X0.286 Y0.285
X0.428 Y0.143
X0.143
X0.429 Y-0.143
X0.285 Y-0.285
X0.143 Y-0.429
Y-0.143
X-0.143 Y-0.428
X-0.285 Y-0.286
X-0.429 Y-0.143
X-0.143
X-0.428 Y0.143
X-0.286 Y0.286
X-0.143 Y0.571
Y0.714
X0.143 Y0.715
X0.286 Y0.428
X0.428 Y0.143
X0.286
X0.428 Y-0.143
X0.143 Y-0.286
`;

gc_num[7] = `;seven
G0 Y3
G1 X2
X-1.429 Y-3
`;

gc_num[8] = `;eight
G0 X0.714 Y3
G1 X-0.428 Y-0.143
X-0.143 Y-0.286
Y-0.285
X0.143 Y-0.286
X0.285 Y-0.143
X0.572 Y-0.143
X0.428 Y-0.143
X0.286 Y-0.285
X0.143 Y-0.286
Y-0.429
X-0.143 Y-0.285
X-0.143 Y-0.143
X-0.428 Y-0.143
X-0.572
X-0.428 Y0.143
X-0.143 Y0.143
X-0.143 Y0.285
Y0.429
X0.143 Y0.286
X0.286 Y0.285
X0.428 Y0.143
X0.572 Y0.143
X0.285 Y0.143
X0.143 Y0.286
Y0.285
X-0.143 Y0.286
X-0.428 Y0.143
X-0.572
`;

gc_num[9] = `;nine
G0 X1.857 Y2
G1 X-0.143 Y-0.429
X-0.285 Y-0.285
X-0.429 Y-0.143
X-0.143
X-0.428 Y0.143
X-0.286 Y0.285
X-0.143 Y0.429
Y0.143
X0.143 Y0.428
X0.286 Y0.286
X0.428 Y0.143
X0.143
X0.429 Y-0.143
X0.285 Y-0.286
X0.143 Y-0.571
Y-0.714
X-0.143 Y-0.715
X-0.285 Y-0.428
X-0.429 Y-0.143
X-0.286
X-0.428 Y0.143
X-0.143 Y0.286
`;

return gc_num[numeral];
}